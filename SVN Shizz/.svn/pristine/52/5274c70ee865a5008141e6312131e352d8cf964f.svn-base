/*-------------------------------------------------------------------------------
 * Programmer: Eric Mensen & Ethan Bachinski
 * Name: turnList.c
 * Description: This program implements a turns linked list and helper functions
 *              for the mail delivery robot.
 *
  -------------------------------------------------------------------------------*/
#include "turnList.h"
#include <stddef.h>
#include <stdlib.h>
/*-----------------------------------------------------------------------------
 * Function name: appendTurnToEnd
 * Description: This function creates a new node with the given value and
 *              inserts it at the end of the linked list.
 * Input: topPtr = pointer to NodePtr = pointer to the pointer of the first
 *                                        node of the list. The list is
 *                                        assumed to be in ascending order.
 *        value = char = integer value of node to be created/inserted in
 *                      sorted linked list
 * Output: topPtr = pointer to NodePtr = pointer to the pointer of the first
 *                                         node of the list. If a node
 *                                         was inserted at the beginning of
 *                                         the list, the value of *startPtr
 *                                         will have changed.
 ----------------------------------------------------------------------------*/
void appendTurnToEnd(NodePtr *topPtr, char turn)
{
    NodePtr newNodePtr = NULL;

    /* create new node */
    newNodePtr = (NodePtr) malloc(sizeof(Node));
    /* set the turn value for newNodePtr to the char turn that is input */
    newNodePtr->turn = turn;
    /* set the next pointer to NULL */
    newNodePtr->nextPtr = NULL;

    /* make the nextPtr of the current tail pointer point to the new node */
    if(*topPtr != NULL) /* if a node exists in the list */
    {
        (*topPtr)->nextPtr = newNodePtr;
    }

    /* make *tailPtr point to the new node */
    *topPtr = newNodePtr;

    /*  if queue was previously empty, modify *topPtr to also point to the new node */
    if (*topPtr == NULL)
    {
        *topPtr = newNodePtr;
    }
}

/*-----------------------------------------------------------------------------
 * Function name: freeAllMemoryInTurnArray
 * Description: This function frees all the memory in a linked list and
 *              sets the start pointer to be equal to NULL. All
 *              nodes in the linked list must have been dynamically allocated.
 * Input: topPtr = NodePtr * = pointer to pointer to the first node of linked
 *                               list
 * Output: topPtr = NodePtr * = modification of the startPtr so that it
 *                                equals NULL to indicate an empty list
 ----------------------------------------------------------------------------*/
void freeAllMemoryInTurnList(NodePtr *topPtr)
{
    //declares new variables in our structure
    NodePtr tmpPtr, currentPtr;
    //sets our current pointer to the pointer of the first node of our linked list
    currentPtr = *topPtr;
    //while loop to check if the current pointer is Null or not
    while (currentPtr != NULL)
    {
        tmpPtr = currentPtr;              /* keep a pointer to the node to be deleted */
        currentPtr = currentPtr->nextPtr; /* before memory for the node is freed, obtain a pointer to the next node */

        free(tmpPtr);                     /* free memory for the node */
    }

    /* indicate that the list is empty */
    *topPtr = NULL;

}

/*-----------------------------------------------------------------------------
 * Function name: lengthTurnList
 * Description: This function returns the length of the turns list
 * Input: topPtr = NodePtr = pointer to the first node of linked
 *                               list
 * Output: length = int = number of elements in the linked list
 ----------------------------------------------------------------------------*/
int lengthTurnList(NodePtr topPtr)
{
        // Set up a variable to store the current pointer being used
        NodePtr currentPtr;
        // Initialize a variable to store length of the list
        int length=0;
        // Set current pointer to the first location, which is the input pointer
        currentPtr = topPtr;
        // If the current pointer is NULL the list is empty
        if (currentPtr == NULL)
        {
            length = 0; // Set length to 0
        }
        else
        {
            // While the current pointer is not NULL
            while (currentPtr != NULL)
            {
                currentPtr = currentPtr->nextPtr;   // Set the current pointer to the next pointer location
                length++;                           // Increment length
            }
        }
        return length;

}

/*-----------------------------------------------------------------------------
 * Function name: giveAddressPointers
 * Description: This function returns the locations of the U turns in the array
 * Input: topPtr = NodePtr = pointer to the first node of linked
 *                               list
 *         addressLocations = NodePtr** = pointer to pointer to nodes of a linked list
 * Output: addressLocations = NodePtr** = modification of addressLocations such that
 *                                        it points to a dynamically allocated array of
 *                                        NodePtr; each entry in the array points to the
 *                                        node with U turns in the linked list. See first figure
 *                                        in description
 * Output: length = int = number of elements in the linked list

 ----------------------------------------------------------------------------*/
int giveAddressPointers(NodePtr topPtr, NodePtr **addressLocations)
{
    NodePtr newNodePtr = (NodePtr) malloc(sizeof(Node));
    newNodePtr = topPtr;
    int nAddresses = 0;
    *addressLocations = NULL;
    while(newNodePtr != NULL)
    {
        nAddresses++;
        newNodePtr = newNodePtr->nextPtr;
    }

    return (nAddresses); // does not count the last U turn.
}


/*-----------------------------------------------------------------------------
 * Function name: concatenateTurnArrays
 * Description: Concatenate two turn arrays
 * Input: topPtr = pointer to the pointer of the first
 *                                         list.
 *        inTurns  = pointer to the second list.
 * Input: topPtr = pointer to the pointer of the first list; the second list is
 *                 added to the end of the first list pointed by topPtr.
 ----------------------------------------------------------------------------*/
void concatenateTurnArrays(NodePtr *topPtr, NodePtr inTurns)
{
    //declares new variable in the structure
    NodePtr p;
    //if the pointer of the first linked list is null returns
    if(*topPtr == NULL)
    {
        return;
    }
    //if the pointer of the first value in this list is null returns
    else if(inTurns == NULL)
    {
        return;
    }
    //sets our new structure variable equal to the pointer to the first variable of our first linked list
    p = *topPtr;
    //while loop to see if the next pointer of the linked list is Null
    while(p -> nextPtr != NULL)
    {
        //moves p to the last node
        p = p -> nextPtr;
        //address of the first node of our second linked list
        p -> nextPtr = inTurns;
    }

}

/*-----------------------------------------------------------------------------
 * Function name: giveOptimizedTurnList
 * Description: This function creates a new optimal turns list to visit the delivery
 * addresses specified by deliveries. It will remove visits to stations not specified
 * in the delivery list. See the second figure in the description for the details. This
 * function should call copyAndSimplifyTurnList on segments of the turnslist and concatenates
 * the resulting arrays.
 *
 * Input:       topPtr = NodePtr = pointer to the list of turns
 *              deliveries = int* = pointer to the list of deliveries
 *              nDeliveries = int = the number of deliveries (length of deliveries
 *                                  array
 ----------------------------------------------------------------------------*/

NodePtr giveOptimizedTurnList(NodePtr topPtr, int * deliveries,int nDeliveries)
{
    NodePtr optPtr = NULL;



    return(optPtr);

}


/*-----------------------------------------------------------------------------
 * Function name: copyAndSimplifyTurnList
 * Description: This function creates a new linked list by copying
 *              a segment of a specified linked list
 *              (from startPtr to endPtr and simplifies it
 *              by removing the visits to the intermediate stations
 * Input:       startPtr = NodePtr = pointer to the new list
 *              endPtr = NodePtr = pointer to the last turn in the list
 * Output:      simplifiedPtr = NodePtr = pointer to the simplified list
 ----------------------------------------------------------------------------*/
NodePtr copyAndSimplifyTurnList(NodePtr startPtr, NodePtr endPtr)
{

    NodePtr simplifiedPtr = NULL;

    // When node to be deleted is head node
    if(startPtr == endPtr)
    {
        /* Copy the data of next node to head */
        startPtr->turn = startPtr->nextPtr->turn;
        // store address of next node
        endPtr = startPtr->nextPtr;
        // Remove the link of next node
        startPtr->nextPtr = startPtr->nextPtr->nextPtr;
        // free memory
        free(endPtr);
    }
    // find the previous node
    node *prev = startPtr;
    while(prev->nextPtr != NULL && prev->nextPtr != endPtr)
    {
        prev = prev->nextPtr;
    }
    // Remove node from Linked List
    prev->nextPtr = prev->nextPtr->nextPtr;

    return(simplifiedPtr);


}
/*-----------------------------------------------------------------------------
 * Function name: simplifyTurns
 * Description: This function optimizes the last three nodes of the
 *              specified linked list
 *              For example, it will update the list SSLUL to SSS
 *              Note that it will not simplify the list if U is not the second last
 *              turn. For example, if called with SLULSS, the result will be SLULSS.
 * Input:       startPtr = NodePtr* = pointer to pointer the linked list of input turns
 * Output:      startPtr = NodePtr* = pointer to pointer the linked list of output turns

 * note: based on code provided in maze-solve.c provided by 3pi
 ----------------------------------------------------------------------------*/


void simplifyTurns(NodePtr *startPtr)
{
    NodePtr endPtr=*startPtr;     // pointer to the last node
    NodePtr endMinusOnePtr=NULL;  // pointer to the second last node
    NodePtr endMinusTwoPtr=NULL;  // pointer to the node before the second last node

    char character;

    int total_angle;

    if (*startPtr==NULL) {  // EMPTY LIST; do nothing
        return;
    }

    while (endPtr->nextPtr != NULL)
    {
        endMinusTwoPtr = endMinusOnePtr;
        endMinusOnePtr = endPtr;
        endPtr = endPtr->nextPtr;
    }

    // If size <3 or second last element is not U, return;

    if(endMinusTwoPtr==NULL || endMinusOnePtr->turn != 'U')
        return;
    else
    {   // logic from maze-solve.c

        total_angle = 0;
        character = endMinusTwoPtr->turn;
        total_angle += (character=='R')*90 + (character=='L')*270 + (character=='U')*180;
        character = endMinusOnePtr->turn;
        total_angle += (character=='R')*90 + (character=='L')*270 + (character=='U')*180;
        character = endPtr->turn;
        total_angle += (character=='R')*90 + (character=='L')*270 + (character=='U')*180;
        total_angle = total_angle % 360;

        switch(total_angle)
        {
            case 0:
                endMinusTwoPtr->turn = 'S';
                break;
            case 90:
                endMinusTwoPtr->turn = 'R';
                break;
            case 180:
                endMinusTwoPtr->turn = 'U';
                break;
            case 270:
                endMinusTwoPtr->turn = 'L';
                break;
        }
        free(endPtr);
        free(endMinusOnePtr);
        endMinusTwoPtr->nextPtr = NULL;
    }
}


