/*------------------------------------------------------------------------------
 * Programmers: Ethan Bachinski & Eric Mensen
 * Name: hw4.c
 -------------------------------------------------------------------------------*/
#include <pololu/3pi.h>         /* allow use of 3pi robot functions */
#include "hw4-utility.h"        /* extra functions for hw4 */
#include "turnList.h"           /* linked list functions */
#include <stddef.h>
#include <stdlib.h>


/* function prototypes for HW4-part2
 -------------------------------------------------------------------------------*/
void learnAddresses(NodePtr *learnedTurns);
void goToAddresses(NodePtr learnedTurns);

// Music
//-------
const char Ready[] PROGMEM = "T500>d-d-r16>d-r8r8r8";

const char welcome[] PROGMEM = ">g32>>c32";

/* main function
 -------------------------------------------------------------------------------*/
int main( void )
{
    /* perform battery check */
    bat_check();

        /* calibrate line sensors */

    play_from_program_space(welcome);
    clear();
    print("Calibration");
    auto_calibrate_line_sensors();


    // TODO: learn the addresses by going around the track: call learnAddresses
    //-------------------------------------------------------------------
    learnAddresses(*learnedTurns);


    while(1)
    {
        clear();
        print("Delivery");
        lcd_goto_xy(0,1);
        print("Press B");
        wait_for_button(ANY_BUTTON);

        play_from_program_space(Ready);
        while(is_playing());

        // get the delivery addresses from the user
        //---------------------------------------------
        // YOUR CODE HERE


        // print, play music, and wait
        //-------------------------------


        // obtain the optimal turn list: call giveOptimizedTurnList
        //------------------------------------------------------------

        giveOptimizedTurnList(startPtr, *deliveries, nDeliveries);

        // go to the addresses: call goToAddresses
        //------------------------------------------------
        goToAddresses(turnList);


    }

}

//----------------------------------------------------------------------------
// learnTrack: learn the track by going around the track and
//              adding to the linked list
// Input   learnedTurns = NodePtr*   (pointer to the linked list)
// Output  learnedTurns = NodePtr* = this list will be updated by the learned
//                        turns.
//---------------------------------------------------------------------------------

void learnAddresses(NodePtr *learnedTurns)
{
    int mail_addresses=0;
    int done = 1;
    // Until the packing station is reached, repeat the following
    //-----------------------------------------

    while (! done)
    {
        /*  1. followSegment (move along straight lines until intersection
                              is reached)
        ------------------------------------------------------------------ */
        follow_segment();

       /*  2. get the status of the robot based on sensor readings)
       --------------------------------------------------------------------*/
       auto_calibrate_line_sensors();

      /* 3. Check if robot has reached back at dispatch by checking atEnd flag
            If so, make a U turn, record it in linked list, stop the robot, and
            return or set done to 1.
       --------------------------------------------------------------------*/
       if(*black_all_around==0&&*black_to_left==0&&*black_to_right==0&&*black_ahead==0)
       {
            uTurn();
            mail_addresses++;
       }
       else if(*black_all_around==1)
       {
           stopRobot();
       }
      /*  4. Else, follow left hand on the wall strategy on intersection
               & record turn in linked list
       ---------------------------------------------------------*/
       else if(*black_ahead==1&&*black_to_right==0&&*black_to_left==1)
       {
           turnLeft();
           turn++;
       }
       else if(*black_ahead==1&&*black_to_right==0&&*black_to_left==0)
       {
           moveStraight();
       }
       else
       {
           turnRight();
           turn++;
       }

    }

    return;
}

//----------------------------------------------------------------------------
// goToAddresses: go to the delivery addresses by following the optimal path
//              specified by turnList
// Input   learnedTurns = NodePtr  = pointer to the linked list
//---------------------------------------------------------------------------------

void goToAddresses(NodePtr turnList)
{

    int done = 1;
    while (! done)
    {


        /*  1. followSegment (move along straight lines until intersection)
         ----------------------------------------------------------------- */

        /*  2. obtain sensor values
         ----------------------------------------------------------------- */

        /*  3. stop robot if at end; at dispatch: stop the robot &return from
               program or set done=1
         ------------------------------------------------------------------ */

        /*  4. check if robot is at an intersection
               if at an intersection, check if list is empty: if empty, the
                robot is back at dispatch. stop the robot and return
               from program or set done=1

               if list is not empty, read the current turn in the list &
                do appropriate move.
         --------------------------------------------------------------------- */

    }
}




