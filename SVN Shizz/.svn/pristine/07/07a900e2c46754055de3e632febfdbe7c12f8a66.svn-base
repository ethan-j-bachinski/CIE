/*------------------------------------------------------------------------------
 * Programmer: Ethan Bachinski
 * Name: hw3.c
 * Description: For this homework assignment we were tasked with taking a 'robot' and having it traverse through a maze.
                The first thing that my code does is introduces the game and instructs the user that we need to learn the maze.
                Next it instructs the user to use the spacebar to go from the beginning of the maze which is called homebase.
                the user will continuously hold down the spacebar while the robot learns the maze.  The robot keeps track of every
                single step that it takes, every turn that it makes and each time that a U-turn is hit counts that as an address.
                ***Be careful the robot will fly through the maze***
                Once it has gone through the entire maze and back to 'Homebase' a new menu will appear on the screen telling the
                user that the maze has been successfully learned.  It will then ask the user to choose from 0 to 1-(the number of stops)
                as address locations for the robot to deliver to.  It can take as many addresses as the user wants.  Once the user
                enters the addresses they need to enter -1 end the delivery array. Then the code will sort the addresses putting them
                in order from lowest to highest. Then it will tell the user to press the spacebar to go to those addresses skipping
                over anyones that are not supposed to be entered.
 -------------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "useCurses.h"

#include "robotModel.h"
#include "maze.h"


/* function prototype for initializing maze and robot from command line arguments */
int initMazeAndRobotFromCLArgs(int argc, char *argv[], Maze *maze, RobotModel *robot);
int copyAndSimplify(char *inturns, char *outturns, int numturns);
int simplifyTurns(char *turns, int *numTurns);
//My new function prototypes to use in my code
//Homebase function prototype
int homeBase(Maze maze,RobotModel robot);
//sort_array function prototype
void sort_array(int *arr,int arrsize);
int main( int argc, char *argv[] )
{
    // Maze and related variables
    Maze maze;                  /* structure to store maze */
    RobotModel robot;           /* structure to model robot (current position + direction)*/
    char input;                 // Character to have the user press s to initialize the maze
    int turn=0;                 // Counts the number of turns
    char addarr[300] = {NULL};  // Array to store the turns that are made by the robot
    int Numberofaddresses=0;    // Counts the total number of addresses entered by the user to visit
    int stop=0;                 // Counts the total number of addresses in the maze
    int moves=0;                // Counts the total number of moves made by the robot
    int addressnumber=-1;       // Takes in the addresses that the user has inputted
    int *delivery;              // Array for which the bot will make deliveries
    //mailbox structure to store addresses, the number of total moves and a pointer
    struct mailbox
    {
        int address;
        int turn;
        struct mailbox *nextPtr;
    };
    //defining a pointer to my structure
    typedef struct mailbox *MailboxPtr;
/********************************Part 1*****************************************************************/
    /* initialize curses mode */
    initscr();
    printw("\n Resize screen\n");
    printw("\n Then press s to start \n");
    do
    {
        scanw("%c", &input);
    }
    while (input != 's');
   /* if successfully have initialized robot and maze, solve maze */
        if (initMazeAndRobotFromCLArgs(argc, argv, &maze, &robot))
        {
            //declaring startPtr & currentPtr from my typedef structure pointer
            MailboxPtr startPtr=NULL;
            MailboxPtr currentPtr=NULL;
            //allocating memory to my startPtr
            startPtr=(MailboxPtr) malloc(sizeof(MailboxPtr));
            //equating currentPtr to startPtr
            currentPtr=startPtr;
            int done = 0;
            while(!done)
            {
                //variables that set the colors the robot sees to either 0 or 1
                int BinF=blackInFront(maze, robot);
                int BtoL=blackToLeft(maze, robot);
                int BtoR=blackToRight(maze, robot);
                int onB=onBlack(maze, robot);
                //clears the screen
                clear();
                //prints the maze and position of the robot
                printMazePlusCurrentPos(maze, robot);
                //if the robot is in the homebase moves out of homebase into the maze
                if(homeBase(maze, robot)==1)
                {
                    //function to move the robot forward one space
                    moveStraight(&robot);
                    //counts the number of moves the robot makes
                    moves++;
                }
                else
                {
                    //checks to see if the robot is not in homebase
                    while(homeBase(maze,robot)!=1)
                    {
                        clear();
                        printMazePlusCurrentPos(maze, robot);
                        int BinF=blackInFront(maze, robot);
                        int BtoL=blackToLeft(maze, robot);
                        int BtoR=blackToRight(maze, robot);
                        int onB=onBlack(maze, robot);
                        //print statements to let the user know what to do to move the robot through the maze
                        printw("Lets learn the maze! Press and Hold spacebar to do so\n");
                        //prints the incremented number of moves by the robot
                        printw("Steps: %d\n",moves);
                        //increments the uturns that the robot makes which are the mail stops available
                        printw("Total mail stop options %d\n", stop);
                        //sets the spacebar to move the robot
                        char c=getch();
                        if(c!=' ')continue;
                        {
                            //if statement to tell the robot that their is a left turn available and do that first
                            if(BtoL==1&&onB==1)
                            {
                                //function to tell the robot to turn left
                                turnLeft(&robot);
                                //increments the number of turns that the robot makes
                                turn++;
                                //adds the turn "L" to the array of the turns made by the robot
                                addarr[turn]='L';
                            }
                            else if(BinF==1&&onB==1)
                            {
                                //function to move the robot straight
                                moveStraight(&robot);
                            }
                            else if(BtoR==1&&onB==1)
                            {
                                //fucntion to tell the robot to turn right
                                turnRight(&robot);
                                //increments the turns
                                turn++;
                                //adds an "R" to the address array
                                addarr[turn]='R';
                            }
                            else if(BtoR==0&&BtoL==0&&BinF==0&&onB==1)
                            {
                                //function to turn the robot around
                                uTurn(&robot);
                                //adds a "U" to the address array
                                addarr[turn]='U';
                                //increments the turns
                                turn++;
                                //current pointer arrow operator that points the address to the stop
                                currentPtr->address=stop;
                                //increments the number of stops
                                stop++;
                                //current pointer arrow operator that points to the moves address
                                currentPtr->turn=turn;
                                //printw("\n Address: %d \n",currentPtr->address);
                                //printw("\n Steps: %d \n",currentPtr->moves);
                                //allocates memory for the address of the nextPtr
                                currentPtr->nextPtr=(MailboxPtr) malloc(sizeof(MailboxPtr));
                                currentPtr=currentPtr->nextPtr;
                                getch();
                            }
                            moves++;
                        }
                    }
                    done=1;
                    clear();
                    printMazePlusCurrentPos(maze, robot);
                    currentPtr=startPtr;
                   /* for(int i=0;i<stop;i++)
                    {
                        printw("\n Address: %d\n",currentPtr->address);
                        printw("Steps: %d",currentPtr->moves);
                        currentPtr=currentPtr->nextPtr;
                    }*/
                }
                getch();
            }
        }
/***********************************Part 2**********************************************************/
        //allocates memory for the delivery array
        delivery=(int*)malloc(stop*sizeof(int));
        //sets all variables in the array to -1
        for(int i=0;i<stop;i++)
        {
            delivery[i]=-1;
        }
                clear();
                printMazePlusCurrentPos(maze, robot);
                printw("\n Maze has been learned! \n");
                printw("\n What addresses would you like to deliver? \n");
                printw("\n You can choose from address 1 to address %d \n",stop);
                printw("\n Press -1 when finished. \n");
                int done=0;
                while(done!=-1)
                {
                    //allows the user to enter the addresses they want to enter to deliver to
                    scanw(" %d \n",&addressnumber);
                    //when -1 is entered ends the addresses they want to deliver to are done
                    if(addressnumber==-1)
                    {
                        done=-1;
                    }
                    else
                    {
                        //checks to see if the user enters a valid address
                        if(addressnumber>stop||addressnumber<-1)
                        {
                            clear();
                            printMazePlusCurrentPos(maze, robot);
                            printw("\n Not a valid address. Enter another one. \n");
                            printw("\n What addresses would you like to deliver? \n");
                            printw("\n You can choose from address 1 to address %d ",stop);
                            printw("\n Press -1 when finished. ");
                        }
                        //sets all the values of the array equal to the addresses entered by the user
                        else
                        {
                            delivery[Numberofaddresses]=addressnumber;
                            Numberofaddresses++;
                            //printw("\n%d\n",Numberofaddresses);
                        }
                    }
                }
                //function that puts the addresses entered in order
                    sort_array(delivery,Numberofaddresses);
                        printw(" Addresses: ");
                        //prints the addresses to be delivered in order
                        for(int i=0;i<Numberofaddresses;i++)
                        {
                            printw(" %d",delivery[i]);
                        }
                    getch();
/********************************Part 3***********************************************/
        //Reprints the maze and places the robot
        clear();
        printMazePlusCurrentPos(maze, robot);
        //character array to allocate memory for the best path possible
        char *bestPath=(char*)malloc(turn*sizeof(char));
        //Integer that counts how many turns it takes to get to each address
        int shortestturns;
        //Reinitializes the maze
        if(initMazeAndRobotFromCLArgs(argc, argv, &maze, &robot))
        {
            // Reinitializing any variables that need to be used again
            int BinF=blackInFront(maze, robot);
            int BtoL=blackToLeft(maze, robot);
            int BtoR=blackToRight(maze, robot);
            int onB=onBlack(maze, robot);
            char *outturns=0;
            int done=0;
            clear();
            printMazePlusCurrentPos(maze, robot);
            //Tells the user that the robot is ready to make some deliveries
            printw("\nTime to make some deliveries!\n");
            printw("\nPress the spacebar to deliver the mail!\n");
            getch();
            //moves the robot out of homebase
            moveStraight(&robot);
            clear();
            printMazePlusCurrentPos(maze, robot);
            //Sets shortestturns equal to the copyandsimplify function
            shortestturns=copyAndSimplify(addarr,bestPath,turn);
            printw("The optimum path is: \n");
            for(int i=0;i<turn;i++)
            {
                printw("%c",bestPath[i]);
                getch();
            }
            //Now the robot can go around the maze without turning down any addresses
            printw("\n The amount of turns to get to that address is: %d \n",shortestturns);
            while(done!=-1)
            {
                char c=getch();
                if(c!=' ')continue;
                {
                    *bestPath++;
                }
                if(homeBase(maze,robot)==1)
                {
                    done=-1;
                }
            }
            printw("Deliveries made!!!");
            getch();
        }
    endwin();
    return 0;
}

/**************************************
    Function name: sort_array
    Description: This function will sort the addresses that are entered into the array and puts them in ascending order.
    Inputs: *arr=delivery array
            arrsize=Numberofaddresses
**************************************/
void sort_array(int *arr,int arrsize)
{
    int i,j,temp;

    for(i=0;i<arrsize;i++)
    {
        j=i;

        while(j>0&&arr[j]<arr[j-1])
        {
            temp=arr[j];
            arr[j]=arr[j-1];
            arr[j-1]=temp;
            j--;
        }
    }
}
/******************************************
    Function Name: homeBase
    Description: This function determines whether or not the robot is in the homebase.
    Inputs:maze=Maze maze
            robot=RobotModel robot
    Outputs: returns a 1 if the robot is in the maze and returns a 0 if the robot is out in the maze
******************************************/
int homeBase(Maze maze,RobotModel robot)
{
            if(blackInFront(maze, robot)==1&&blackToLeft(maze, robot)==1&&onBlack(maze, robot)==1&&blackToRight(maze,robot)==1)
            {
                return 1;
            }
            else
            {
                return 0;
            }
}
/*-----------------------------------------------------------------------------
 * Function name: initMazeAndRobotFromCLArgs
 * Description: This function uses the specified command-line arguments to
 *              initialize the given Maze and RobotModel variables. If the
 *              incorrect number of command-line arguments is passed, an
 *              error message is displayed (and 0 is returned).
 * Inputs: argc = int = number of command-line arguments
 *         argv = array of strings = command-line arguments, with argv[1]
 *                                   being the input file name
 *         m = Maze * = pointer to Maze structure that should be initialized
 *                      in this function (passed by simulated reference)
 *         robot = RobotModel * = pointer to RobotModel that should be
 *                                initialized in this function (passed by
 *                                simulated reference)
 * Outputs: m = Maze * = pointer to initialized Maze
 *          robot = RobotModel * = pointer to initialized RobotModel
 *          int = 1 if initialization successful
 *                0 if error encountered
 ----------------------------------------------------------------------------*/
int initMazeAndRobotFromCLArgs(int argc, char *argv[], Maze *maze, RobotModel *robot)
{
    int success = 1;
    char *inputFileName;    /* input file name containing maze */
    /* obtain input filename from command line */
    if (argc >= 2) /* require at least two command-line arguments */
    {
        inputFileName = argv[1];
    }
    else
    {
        /* when incorrect number of command-line arguments are passed,
           print message indicating proper usage of program  */
        printw("Usage: %s inputFileName.txt\n", argv[0]);
        success = 0;
    }

    if (success)
    {
        success = readMaze(inputFileName, maze, robot);
    }

    return success;
}


/*-----------------------------------------------------------------------------
 * Function name: copyAndSimplify
 * Description: This function copies the inturns array with numturns entries to
 *              outturns array and simplifies it by deleting the visits to the
 *              intermediate addresses.
 * Inputs: *inturns: pointer to turn array that have to be copied & simplified
 *         *outturns: pointer to the simplified array of turns
 *         numturns: number of turns that will be copied and simplified
 * Output  optturns: length of the copied array
 ----------------------------------------------------------------------------*/
int copyAndSimplify(char *inturns, char *outturns, int numturns)
    {
        int i;
        int optturns = 0;
        for (i=0; i<numturns-1; i++) {
            outturns[optturns] = inturns[i];
            optturns++;
            simplifyTurns(outturns, &optturns);

        }
        return(optturns);
    }


/* note: based on code provided in maze-solve.c
 provided by 3pi */
int simplifyTurns(char *turns, int *numTurns)
{
    int done = 1;
    int n = *numTurns;
    if (n >= 3 && turns[n-2] == 'U')
    {
        int total_angle = 0;
        int i;
        for (i=1; i<=3; i++)
        {
            switch(turns[n-i])
            {
                case 'R':
                    total_angle += 90;
                    break;
                case 'L':
                    total_angle += 270;
                    break;
                case 'U':
                    total_angle += 180;
                    break;
            }
        }

        total_angle = total_angle % 360;

        switch(total_angle)
        {
            case 0:
                turns[n-3] = 'S';
                break;
            case 90:
                turns[n-3] = 'R';
                break;
            case 180:
                turns[n-3] = 'U';
                done = 0;
                break;
            case 270:
                turns[n-3] = 'L';
                break;
        }

        *numTurns = *numTurns - 2;
     }
    return(done);

}


